// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: data.proto
// Protobuf C++ Version: 6.31.1

#ifndef data_2eproto_2epb_2eh
#define data_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "message.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_data_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_data_2eproto;
}  // extern "C"
enum SyncItem_SyncType : int;
extern const uint32_t SyncItem_SyncType_internal_data_[];
class FileChunk;
struct FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull FileChunk_class_data_;
class OfflineMessages;
struct OfflineMessagesDefaultTypeInternal;
extern OfflineMessagesDefaultTypeInternal _OfflineMessages_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull OfflineMessages_class_data_;
class SyncItem;
struct SyncItemDefaultTypeInternal;
extern SyncItemDefaultTypeInternal _SyncItem_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SyncItem_class_data_;
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::SyncItem_SyncType_internal_data_>
    internal::EnumTraitsImpl::value<::SyncItem_SyncType>;
}  // namespace protobuf
}  // namespace google

enum SyncItem_SyncType : int {
  SyncItem_SyncType_FRIEND_UPDATE = 0,
  SyncItem_SyncType_GROUP_UPDATE = 1,
  SyncItem_SyncType_BE_KICKED = 2,
  SyncItem_SyncType_FRIEND_REQUEST = 3,
  SyncItem_SyncType_SyncItem_SyncType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  SyncItem_SyncType_SyncItem_SyncType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t SyncItem_SyncType_internal_data_[];
inline constexpr SyncItem_SyncType SyncItem_SyncType_SyncType_MIN =
    static_cast<SyncItem_SyncType>(0);
inline constexpr SyncItem_SyncType SyncItem_SyncType_SyncType_MAX =
    static_cast<SyncItem_SyncType>(3);
inline bool SyncItem_SyncType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int SyncItem_SyncType_SyncType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SyncItem_SyncType_descriptor();
template <typename T>
const ::std::string& SyncItem_SyncType_Name(T value) {
  static_assert(::std::is_same<T, SyncItem_SyncType>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to SyncType_Name().");
  return SyncItem_SyncType_Name(static_cast<SyncItem_SyncType>(value));
}
template <>
inline const ::std::string& SyncItem_SyncType_Name(SyncItem_SyncType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SyncItem_SyncType_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool SyncItem_SyncType_Parse(
    ::absl::string_view name, SyncItem_SyncType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncItem_SyncType>(SyncItem_SyncType_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class SyncItem final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SyncItem) */ {
 public:
  inline SyncItem() : SyncItem(nullptr) {}
  ~SyncItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SyncItem* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SyncItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SyncItem(::google::protobuf::internal::ConstantInitialized);

  inline SyncItem(const SyncItem& from) : SyncItem(nullptr, from) {}
  inline SyncItem(SyncItem&& from) noexcept
      : SyncItem(nullptr, ::std::move(from)) {}
  inline SyncItem& operator=(const SyncItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncItem& operator=(SyncItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncItem& default_instance() {
    return *reinterpret_cast<const SyncItem*>(
        &_SyncItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SyncItem& a, SyncItem& b) { a.Swap(&b); }
  inline void Swap(SyncItem* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncItem* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncItem* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SyncItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SyncItem& from) { SyncItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SyncItem* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "SyncItem"; }

 protected:
  explicit SyncItem(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SyncItem(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SyncItem& from);
  SyncItem(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SyncItem&& from) noexcept
      : SyncItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using SyncType = SyncItem_SyncType;
  static constexpr SyncType FRIEND_UPDATE = SyncItem_SyncType_FRIEND_UPDATE;
  static constexpr SyncType GROUP_UPDATE = SyncItem_SyncType_GROUP_UPDATE;
  static constexpr SyncType BE_KICKED = SyncItem_SyncType_BE_KICKED;
  static constexpr SyncType FRIEND_REQUEST = SyncItem_SyncType_FRIEND_REQUEST;
  static inline bool SyncType_IsValid(int value) {
    return SyncItem_SyncType_IsValid(value);
  }
  static constexpr SyncType SyncType_MIN = SyncItem_SyncType_SyncType_MIN;
  static constexpr SyncType SyncType_MAX = SyncItem_SyncType_SyncType_MAX;
  static constexpr int SyncType_ARRAYSIZE = SyncItem_SyncType_SyncType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SyncType_descriptor() {
    return SyncItem_SyncType_descriptor();
  }
  template <typename T>
  static inline const ::std::string& SyncType_Name(T value) {
    return SyncItem_SyncType_Name(value);
  }
  static inline bool SyncType_Parse(
      ::absl::string_view name, SyncType* PROTOBUF_NONNULL value) {
    return SyncItem_SyncType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content() ;
  const ::std::string& content() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_content();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_content();
  void set_allocated_content(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_content() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_content(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_content();

  public:
  // .SyncItem.SyncType type = 1;
  void clear_type() ;
  ::SyncItem_SyncType type() const;
  void set_type(::SyncItem_SyncType value);

  private:
  ::SyncItem_SyncType _internal_type() const;
  void _internal_set_type(::SyncItem_SyncType value);

  public:
  // @@protoc_insertion_point(class_scope:SyncItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 24,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SyncItem& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SyncItem_class_data_;
// -------------------------------------------------------------------

class FileChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FileChunk) */ {
 public:
  inline FileChunk() : FileChunk(nullptr) {}
  ~FileChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileChunk* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileChunk(::google::protobuf::internal::ConstantInitialized);

  inline FileChunk(const FileChunk& from) : FileChunk(nullptr, from) {}
  inline FileChunk(FileChunk&& from) noexcept
      : FileChunk(nullptr, ::std::move(from)) {}
  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileChunk& default_instance() {
    return *reinterpret_cast<const FileChunk*>(
        &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(FileChunk& a, FileChunk& b) { a.Swap(&b); }
  inline void Swap(FileChunk* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileChunk* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileChunk* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileChunk& from) { FileChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileChunk* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "FileChunk"; }

 protected:
  explicit FileChunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FileChunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FileChunk& from);
  FileChunk(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FileChunk&& from) noexcept
      : FileChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFileIdFieldNumber = 1,
    kFilenameFieldNumber = 2,
    kDataFieldNumber = 3,
    kSenderIdFieldNumber = 7,
    kReceiverIdFieldNumber = 8,
    kChunkIndexFieldNumber = 4,
    kTotalChunksFieldNumber = 5,
    kIsLastChunkFieldNumber = 6,
  };
  // string file_id = 1;
  void clear_file_id() ;
  const ::std::string& file_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_file_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_file_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_file_id();
  void set_allocated_file_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_file_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_file_id();

  public:
  // string filename = 2;
  void clear_filename() ;
  const ::std::string& filename() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_filename();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_filename();
  void set_allocated_filename(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_filename() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_filename();

  public:
  // bytes data = 3;
  void clear_data() ;
  const ::std::string& data() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_data();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_data();
  void set_allocated_data(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_data() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_data(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_data();

  public:
  // string sender_id = 7;
  void clear_sender_id() ;
  const ::std::string& sender_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_sender_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_sender_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_sender_id();
  void set_allocated_sender_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_sender_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_sender_id();

  public:
  // string receiver_id = 8;
  void clear_receiver_id() ;
  const ::std::string& receiver_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_receiver_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_receiver_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_receiver_id();
  void set_allocated_receiver_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_receiver_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_receiver_id();

  public:
  // uint32 chunk_index = 4;
  void clear_chunk_index() ;
  ::uint32_t chunk_index() const;
  void set_chunk_index(::uint32_t value);

  private:
  ::uint32_t _internal_chunk_index() const;
  void _internal_set_chunk_index(::uint32_t value);

  public:
  // uint32 total_chunks = 5;
  void clear_total_chunks() ;
  ::uint32_t total_chunks() const;
  void set_total_chunks(::uint32_t value);

  private:
  ::uint32_t _internal_total_chunks() const;
  void _internal_set_total_chunks(::uint32_t value);

  public:
  // bool is_last_chunk = 6;
  void clear_is_last_chunk() ;
  bool is_last_chunk() const;
  void set_is_last_chunk(bool value);

  private:
  bool _internal_is_last_chunk() const;
  void _internal_set_is_last_chunk(bool value);

  public:
  // @@protoc_insertion_point(class_scope:FileChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8,
                                   0, 61,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FileChunk& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr file_id_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr sender_id_;
    ::google::protobuf::internal::ArenaStringPtr receiver_id_;
    ::uint32_t chunk_index_;
    ::uint32_t total_chunks_;
    bool is_last_chunk_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull FileChunk_class_data_;
// -------------------------------------------------------------------

class OfflineMessages final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:OfflineMessages) */ {
 public:
  inline OfflineMessages() : OfflineMessages(nullptr) {}
  ~OfflineMessages() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OfflineMessages* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OfflineMessages));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OfflineMessages(::google::protobuf::internal::ConstantInitialized);

  inline OfflineMessages(const OfflineMessages& from) : OfflineMessages(nullptr, from) {}
  inline OfflineMessages(OfflineMessages&& from) noexcept
      : OfflineMessages(nullptr, ::std::move(from)) {}
  inline OfflineMessages& operator=(const OfflineMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineMessages& operator=(OfflineMessages&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OfflineMessages& default_instance() {
    return *reinterpret_cast<const OfflineMessages*>(
        &_OfflineMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(OfflineMessages& a, OfflineMessages& b) { a.Swap(&b); }
  inline void Swap(OfflineMessages* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineMessages* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineMessages* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OfflineMessages>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OfflineMessages& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OfflineMessages& from) { OfflineMessages::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OfflineMessages* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "OfflineMessages"; }

 protected:
  explicit OfflineMessages(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  OfflineMessages(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const OfflineMessages& from);
  OfflineMessages(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, OfflineMessages&& from) noexcept
      : OfflineMessages(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .ChatMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::ChatMessage* PROTOBUF_NONNULL mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField<::ChatMessage>* PROTOBUF_NONNULL mutable_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::ChatMessage>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::ChatMessage>* PROTOBUF_NONNULL _internal_mutable_messages();
  public:
  const ::ChatMessage& messages(int index) const;
  ::ChatMessage* PROTOBUF_NONNULL add_messages();
  const ::google::protobuf::RepeatedPtrField<::ChatMessage>& messages() const;
  // @@protoc_insertion_point(class_scope:OfflineMessages)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const OfflineMessages& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ChatMessage > messages_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull OfflineMessages_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FileChunk

// string file_id = 1;
inline void FileChunk::clear_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& FileChunk::file_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FileChunk.file_id)
  return _internal_file_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void FileChunk::set_file_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FileChunk.file_id)
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::mutable_file_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:FileChunk.file_id)
  return _s;
}
inline const ::std::string& FileChunk::_internal_file_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_id_.Get();
}
inline void FileChunk::_internal_set_file_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::_internal_mutable_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE FileChunk::release_file_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FileChunk.file_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.file_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.file_id_.Set("", GetArena());
  }
  return released;
}
inline void FileChunk::set_allocated_file_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FileChunk.file_id)
}

// string filename = 2;
inline void FileChunk::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& FileChunk::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FileChunk.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void FileChunk::set_filename(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FileChunk.filename)
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::mutable_filename()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileChunk.filename)
  return _s;
}
inline const ::std::string& FileChunk::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void FileChunk::_internal_set_filename(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.filename_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE FileChunk::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FileChunk.filename)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.filename_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.filename_.Set("", GetArena());
  }
  return released;
}
inline void FileChunk::set_allocated_filename(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FileChunk.filename)
}

// bytes data = 3;
inline void FileChunk::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& FileChunk::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FileChunk.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void FileChunk::set_data(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FileChunk.data)
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:FileChunk.data)
  return _s;
}
inline const ::std::string& FileChunk::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void FileChunk::_internal_set_data(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.data_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.data_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE FileChunk::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FileChunk.data)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.data_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.data_.Set("", GetArena());
  }
  return released;
}
inline void FileChunk::set_allocated_data(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FileChunk.data)
}

// uint32 chunk_index = 4;
inline void FileChunk::clear_chunk_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t FileChunk::chunk_index() const {
  // @@protoc_insertion_point(field_get:FileChunk.chunk_index)
  return _internal_chunk_index();
}
inline void FileChunk::set_chunk_index(::uint32_t value) {
  _internal_set_chunk_index(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:FileChunk.chunk_index)
}
inline ::uint32_t FileChunk::_internal_chunk_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_index_;
}
inline void FileChunk::_internal_set_chunk_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_index_ = value;
}

// uint32 total_chunks = 5;
inline void FileChunk::clear_total_chunks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_chunks_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t FileChunk::total_chunks() const {
  // @@protoc_insertion_point(field_get:FileChunk.total_chunks)
  return _internal_total_chunks();
}
inline void FileChunk::set_total_chunks(::uint32_t value) {
  _internal_set_total_chunks(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:FileChunk.total_chunks)
}
inline ::uint32_t FileChunk::_internal_total_chunks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_chunks_;
}
inline void FileChunk::_internal_set_total_chunks(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_chunks_ = value;
}

// bool is_last_chunk = 6;
inline void FileChunk::clear_is_last_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_last_chunk_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool FileChunk::is_last_chunk() const {
  // @@protoc_insertion_point(field_get:FileChunk.is_last_chunk)
  return _internal_is_last_chunk();
}
inline void FileChunk::set_is_last_chunk(bool value) {
  _internal_set_is_last_chunk(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:FileChunk.is_last_chunk)
}
inline bool FileChunk::_internal_is_last_chunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_last_chunk_;
}
inline void FileChunk::_internal_set_is_last_chunk(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_last_chunk_ = value;
}

// string sender_id = 7;
inline void FileChunk::clear_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& FileChunk::sender_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FileChunk.sender_id)
  return _internal_sender_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void FileChunk::set_sender_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sender_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FileChunk.sender_id)
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::mutable_sender_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:FileChunk.sender_id)
  return _s;
}
inline const ::std::string& FileChunk::_internal_sender_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_id_.Get();
}
inline void FileChunk::_internal_set_sender_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sender_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::_internal_mutable_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.sender_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE FileChunk::release_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FileChunk.sender_id)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.sender_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sender_id_.Set("", GetArena());
  }
  return released;
}
inline void FileChunk::set_allocated_sender_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sender_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FileChunk.sender_id)
}

// string receiver_id = 8;
inline void FileChunk::clear_receiver_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiver_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& FileChunk::receiver_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FileChunk.receiver_id)
  return _internal_receiver_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void FileChunk::set_receiver_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.receiver_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FileChunk.receiver_id)
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::mutable_receiver_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:FileChunk.receiver_id)
  return _s;
}
inline const ::std::string& FileChunk::_internal_receiver_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.receiver_id_.Get();
}
inline void FileChunk::_internal_set_receiver_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.receiver_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::_internal_mutable_receiver_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.receiver_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE FileChunk::release_receiver_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FileChunk.receiver_id)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.receiver_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.receiver_id_.Set("", GetArena());
  }
  return released;
}
inline void FileChunk::set_allocated_receiver_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.receiver_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.receiver_id_.IsDefault()) {
    _impl_.receiver_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FileChunk.receiver_id)
}

// -------------------------------------------------------------------

// SyncItem

// .SyncItem.SyncType type = 1;
inline void SyncItem::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::SyncItem_SyncType SyncItem::type() const {
  // @@protoc_insertion_point(field_get:SyncItem.type)
  return _internal_type();
}
inline void SyncItem::set_type(::SyncItem_SyncType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:SyncItem.type)
}
inline ::SyncItem_SyncType SyncItem::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::SyncItem_SyncType>(_impl_.type_);
}
inline void SyncItem::_internal_set_type(::SyncItem_SyncType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string content = 2;
inline void SyncItem::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& SyncItem::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SyncItem.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SyncItem::set_content(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SyncItem.content)
}
inline ::std::string* PROTOBUF_NONNULL SyncItem::mutable_content()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:SyncItem.content)
  return _s;
}
inline const ::std::string& SyncItem::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void SyncItem::_internal_set_content(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL SyncItem::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE SyncItem::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SyncItem.content)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.content_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.content_.Set("", GetArena());
  }
  return released;
}
inline void SyncItem::set_allocated_content(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SyncItem.content)
}

// -------------------------------------------------------------------

// OfflineMessages

// repeated .ChatMessage messages = 1;
inline int OfflineMessages::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int OfflineMessages::messages_size() const {
  return _internal_messages_size();
}
inline ::ChatMessage* PROTOBUF_NONNULL OfflineMessages::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:OfflineMessages.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ChatMessage>* PROTOBUF_NONNULL OfflineMessages::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:OfflineMessages.messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_messages();
}
inline const ::ChatMessage& OfflineMessages::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OfflineMessages.messages)
  return _internal_messages().Get(index);
}
inline ::ChatMessage* PROTOBUF_NONNULL OfflineMessages::add_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ChatMessage* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:OfflineMessages.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ChatMessage>& OfflineMessages::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:OfflineMessages.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::ChatMessage>&
OfflineMessages::_internal_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::ChatMessage>* PROTOBUF_NONNULL
OfflineMessages::_internal_mutable_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.messages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::SyncItem_SyncType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::SyncItem_SyncType>() {
  return ::SyncItem_SyncType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // data_2eproto_2epb_2eh
