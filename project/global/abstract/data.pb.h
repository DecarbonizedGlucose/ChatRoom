// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
class FileChunk;
struct FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class OfflineMessages;
struct OfflineMessagesDefaultTypeInternal;
extern OfflineMessagesDefaultTypeInternal _OfflineMessages_default_instance_;
class SyncItem;
struct SyncItemDefaultTypeInternal;
extern SyncItemDefaultTypeInternal _SyncItem_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FileChunk* Arena::CreateMaybeMessage<::FileChunk>(Arena*);
template<> ::OfflineMessages* Arena::CreateMaybeMessage<::OfflineMessages>(Arena*);
template<> ::SyncItem* Arena::CreateMaybeMessage<::SyncItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SyncItem_SyncType : int {
  SyncItem_SyncType_RELATION_NET_FULL = 0,
  SyncItem_SyncType_ALL_FRIEND_STATUS = 1,
  SyncItem_SyncType_SyncItem_SyncType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SyncItem_SyncType_SyncItem_SyncType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SyncItem_SyncType_IsValid(int value);
constexpr SyncItem_SyncType SyncItem_SyncType_SyncType_MIN = SyncItem_SyncType_RELATION_NET_FULL;
constexpr SyncItem_SyncType SyncItem_SyncType_SyncType_MAX = SyncItem_SyncType_ALL_FRIEND_STATUS;
constexpr int SyncItem_SyncType_SyncType_ARRAYSIZE = SyncItem_SyncType_SyncType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SyncItem_SyncType_descriptor();
template<typename T>
inline const std::string& SyncItem_SyncType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncItem_SyncType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncItem_SyncType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SyncItem_SyncType_descriptor(), enum_t_value);
}
inline bool SyncItem_SyncType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SyncItem_SyncType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SyncItem_SyncType>(
    SyncItem_SyncType_descriptor(), name, value);
}
// ===================================================================

class FileChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileChunk) */ {
 public:
  inline FileChunk() : FileChunk(nullptr) {}
  ~FileChunk() override;
  explicit PROTOBUF_CONSTEXPR FileChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileChunk(const FileChunk& from);
  FileChunk(FileChunk&& from) noexcept
    : FileChunk() {
    *this = ::std::move(from);
  }

  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
               &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileChunk& a, FileChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(FileChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileChunk& from) {
    FileChunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileChunk";
  }
  protected:
  explicit FileChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 1,
    kFilenameFieldNumber = 2,
    kDataFieldNumber = 3,
    kSenderIdFieldNumber = 7,
    kReceiverIdFieldNumber = 8,
    kChunkIndexFieldNumber = 4,
    kTotalChunksFieldNumber = 5,
    kIsLastChunkFieldNumber = 6,
  };
  // string file_id = 1;
  void clear_file_id();
  const std::string& file_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);
  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(const std::string& value);
  std::string* _internal_mutable_file_id();
  public:

  // string filename = 2;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string sender_id = 7;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // string receiver_id = 8;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // uint32 chunk_index = 4;
  void clear_chunk_index();
  uint32_t chunk_index() const;
  void set_chunk_index(uint32_t value);
  private:
  uint32_t _internal_chunk_index() const;
  void _internal_set_chunk_index(uint32_t value);
  public:

  // uint32 total_chunks = 5;
  void clear_total_chunks();
  uint32_t total_chunks() const;
  void set_total_chunks(uint32_t value);
  private:
  uint32_t _internal_total_chunks() const;
  void _internal_set_total_chunks(uint32_t value);
  public:

  // bool is_last_chunk = 6;
  void clear_is_last_chunk();
  bool is_last_chunk() const;
  void set_is_last_chunk(bool value);
  private:
  bool _internal_is_last_chunk() const;
  void _internal_set_is_last_chunk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FileChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
    uint32_t chunk_index_;
    uint32_t total_chunks_;
    bool is_last_chunk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class SyncItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncItem) */ {
 public:
  inline SyncItem() : SyncItem(nullptr) {}
  ~SyncItem() override;
  explicit PROTOBUF_CONSTEXPR SyncItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncItem(const SyncItem& from);
  SyncItem(SyncItem&& from) noexcept
    : SyncItem() {
    *this = ::std::move(from);
  }

  inline SyncItem& operator=(const SyncItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncItem& operator=(SyncItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncItem* internal_default_instance() {
    return reinterpret_cast<const SyncItem*>(
               &_SyncItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncItem& a, SyncItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncItem& from) {
    SyncItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncItem";
  }
  protected:
  explicit SyncItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SyncItem_SyncType SyncType;
  static constexpr SyncType RELATION_NET_FULL =
    SyncItem_SyncType_RELATION_NET_FULL;
  static constexpr SyncType ALL_FRIEND_STATUS =
    SyncItem_SyncType_ALL_FRIEND_STATUS;
  static inline bool SyncType_IsValid(int value) {
    return SyncItem_SyncType_IsValid(value);
  }
  static constexpr SyncType SyncType_MIN =
    SyncItem_SyncType_SyncType_MIN;
  static constexpr SyncType SyncType_MAX =
    SyncItem_SyncType_SyncType_MAX;
  static constexpr int SyncType_ARRAYSIZE =
    SyncItem_SyncType_SyncType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SyncType_descriptor() {
    return SyncItem_SyncType_descriptor();
  }
  template<typename T>
  static inline const std::string& SyncType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SyncType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SyncType_Name.");
    return SyncItem_SyncType_Name(enum_t_value);
  }
  static inline bool SyncType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SyncType* value) {
    return SyncItem_SyncType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .SyncItem.SyncType type = 1;
  void clear_type();
  ::SyncItem_SyncType type() const;
  void set_type(::SyncItem_SyncType value);
  private:
  ::SyncItem_SyncType _internal_type() const;
  void _internal_set_type(::SyncItem_SyncType value);
  public:

  // @@protoc_insertion_point(class_scope:SyncItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int64_t timestamp_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class OfflineMessages final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessages) */ {
 public:
  inline OfflineMessages() : OfflineMessages(nullptr) {}
  ~OfflineMessages() override;
  explicit PROTOBUF_CONSTEXPR OfflineMessages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OfflineMessages(const OfflineMessages& from);
  OfflineMessages(OfflineMessages&& from) noexcept
    : OfflineMessages() {
    *this = ::std::move(from);
  }

  inline OfflineMessages& operator=(const OfflineMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineMessages& operator=(OfflineMessages&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OfflineMessages& default_instance() {
    return *internal_default_instance();
  }
  static inline const OfflineMessages* internal_default_instance() {
    return reinterpret_cast<const OfflineMessages*>(
               &_OfflineMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OfflineMessages& a, OfflineMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineMessages* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineMessages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OfflineMessages>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OfflineMessages& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OfflineMessages& from) {
    OfflineMessages::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineMessages* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessages";
  }
  protected:
  explicit OfflineMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .ChatMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::ChatMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessage >*
      mutable_messages();
  private:
  const ::ChatMessage& _internal_messages(int index) const;
  ::ChatMessage* _internal_add_messages();
  public:
  const ::ChatMessage& messages(int index) const;
  ::ChatMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:OfflineMessages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessage > messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileChunk

// string file_id = 1;
inline void FileChunk::clear_file_id() {
  _impl_.file_id_.ClearToEmpty();
}
inline const std::string& FileChunk::file_id() const {
  // @@protoc_insertion_point(field_get:FileChunk.file_id)
  return _internal_file_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileChunk::set_file_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileChunk.file_id)
}
inline std::string* FileChunk::mutable_file_id() {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:FileChunk.file_id)
  return _s;
}
inline const std::string& FileChunk::_internal_file_id() const {
  return _impl_.file_id_.Get();
}
inline void FileChunk::_internal_set_file_id(const std::string& value) {
  
  _impl_.file_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileChunk::_internal_mutable_file_id() {
  
  return _impl_.file_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileChunk::release_file_id() {
  // @@protoc_insertion_point(field_release:FileChunk.file_id)
  return _impl_.file_id_.Release();
}
inline void FileChunk::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    
  } else {
    
  }
  _impl_.file_id_.SetAllocated(file_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileChunk.file_id)
}

// string filename = 2;
inline void FileChunk::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileChunk::filename() const {
  // @@protoc_insertion_point(field_get:FileChunk.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileChunk::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileChunk.filename)
}
inline std::string* FileChunk::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:FileChunk.filename)
  return _s;
}
inline const std::string& FileChunk::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void FileChunk::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* FileChunk::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* FileChunk::release_filename() {
  // @@protoc_insertion_point(field_release:FileChunk.filename)
  return _impl_.filename_.Release();
}
inline void FileChunk::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileChunk.filename)
}

// bytes data = 3;
inline void FileChunk::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& FileChunk::data() const {
  // @@protoc_insertion_point(field_get:FileChunk.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileChunk::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileChunk.data)
}
inline std::string* FileChunk::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:FileChunk.data)
  return _s;
}
inline const std::string& FileChunk::_internal_data() const {
  return _impl_.data_.Get();
}
inline void FileChunk::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileChunk::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileChunk::release_data() {
  // @@protoc_insertion_point(field_release:FileChunk.data)
  return _impl_.data_.Release();
}
inline void FileChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileChunk.data)
}

// uint32 chunk_index = 4;
inline void FileChunk::clear_chunk_index() {
  _impl_.chunk_index_ = 0u;
}
inline uint32_t FileChunk::_internal_chunk_index() const {
  return _impl_.chunk_index_;
}
inline uint32_t FileChunk::chunk_index() const {
  // @@protoc_insertion_point(field_get:FileChunk.chunk_index)
  return _internal_chunk_index();
}
inline void FileChunk::_internal_set_chunk_index(uint32_t value) {
  
  _impl_.chunk_index_ = value;
}
inline void FileChunk::set_chunk_index(uint32_t value) {
  _internal_set_chunk_index(value);
  // @@protoc_insertion_point(field_set:FileChunk.chunk_index)
}

// uint32 total_chunks = 5;
inline void FileChunk::clear_total_chunks() {
  _impl_.total_chunks_ = 0u;
}
inline uint32_t FileChunk::_internal_total_chunks() const {
  return _impl_.total_chunks_;
}
inline uint32_t FileChunk::total_chunks() const {
  // @@protoc_insertion_point(field_get:FileChunk.total_chunks)
  return _internal_total_chunks();
}
inline void FileChunk::_internal_set_total_chunks(uint32_t value) {
  
  _impl_.total_chunks_ = value;
}
inline void FileChunk::set_total_chunks(uint32_t value) {
  _internal_set_total_chunks(value);
  // @@protoc_insertion_point(field_set:FileChunk.total_chunks)
}

// bool is_last_chunk = 6;
inline void FileChunk::clear_is_last_chunk() {
  _impl_.is_last_chunk_ = false;
}
inline bool FileChunk::_internal_is_last_chunk() const {
  return _impl_.is_last_chunk_;
}
inline bool FileChunk::is_last_chunk() const {
  // @@protoc_insertion_point(field_get:FileChunk.is_last_chunk)
  return _internal_is_last_chunk();
}
inline void FileChunk::_internal_set_is_last_chunk(bool value) {
  
  _impl_.is_last_chunk_ = value;
}
inline void FileChunk::set_is_last_chunk(bool value) {
  _internal_set_is_last_chunk(value);
  // @@protoc_insertion_point(field_set:FileChunk.is_last_chunk)
}

// string sender_id = 7;
inline void FileChunk::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& FileChunk::sender_id() const {
  // @@protoc_insertion_point(field_get:FileChunk.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileChunk::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileChunk.sender_id)
}
inline std::string* FileChunk::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:FileChunk.sender_id)
  return _s;
}
inline const std::string& FileChunk::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void FileChunk::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileChunk::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileChunk::release_sender_id() {
  // @@protoc_insertion_point(field_release:FileChunk.sender_id)
  return _impl_.sender_id_.Release();
}
inline void FileChunk::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileChunk.sender_id)
}

// string receiver_id = 8;
inline void FileChunk::clear_receiver_id() {
  _impl_.receiver_id_.ClearToEmpty();
}
inline const std::string& FileChunk::receiver_id() const {
  // @@protoc_insertion_point(field_get:FileChunk.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileChunk::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileChunk.receiver_id)
}
inline std::string* FileChunk::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:FileChunk.receiver_id)
  return _s;
}
inline const std::string& FileChunk::_internal_receiver_id() const {
  return _impl_.receiver_id_.Get();
}
inline void FileChunk::_internal_set_receiver_id(const std::string& value) {
  
  _impl_.receiver_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileChunk::_internal_mutable_receiver_id() {
  
  return _impl_.receiver_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileChunk::release_receiver_id() {
  // @@protoc_insertion_point(field_release:FileChunk.receiver_id)
  return _impl_.receiver_id_.Release();
}
inline void FileChunk::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_id_.SetAllocated(receiver_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_id_.IsDefault()) {
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileChunk.receiver_id)
}

// -------------------------------------------------------------------

// SyncItem

// .SyncItem.SyncType type = 1;
inline void SyncItem::clear_type() {
  _impl_.type_ = 0;
}
inline ::SyncItem_SyncType SyncItem::_internal_type() const {
  return static_cast< ::SyncItem_SyncType >(_impl_.type_);
}
inline ::SyncItem_SyncType SyncItem::type() const {
  // @@protoc_insertion_point(field_get:SyncItem.type)
  return _internal_type();
}
inline void SyncItem::_internal_set_type(::SyncItem_SyncType value) {
  
  _impl_.type_ = value;
}
inline void SyncItem::set_type(::SyncItem_SyncType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SyncItem.type)
}

// string content = 2;
inline void SyncItem::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& SyncItem::content() const {
  // @@protoc_insertion_point(field_get:SyncItem.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncItem::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncItem.content)
}
inline std::string* SyncItem::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:SyncItem.content)
  return _s;
}
inline const std::string& SyncItem::_internal_content() const {
  return _impl_.content_.Get();
}
inline void SyncItem::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncItem::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncItem::release_content() {
  // @@protoc_insertion_point(field_release:SyncItem.content)
  return _impl_.content_.Release();
}
inline void SyncItem::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncItem.content)
}

// int64 timestamp = 3;
inline void SyncItem::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t SyncItem::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t SyncItem::timestamp() const {
  // @@protoc_insertion_point(field_get:SyncItem.timestamp)
  return _internal_timestamp();
}
inline void SyncItem::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void SyncItem::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:SyncItem.timestamp)
}

// -------------------------------------------------------------------

// OfflineMessages

// repeated .ChatMessage messages = 1;
inline int OfflineMessages::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int OfflineMessages::messages_size() const {
  return _internal_messages_size();
}
inline ::ChatMessage* OfflineMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:OfflineMessages.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessage >*
OfflineMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:OfflineMessages.messages)
  return &_impl_.messages_;
}
inline const ::ChatMessage& OfflineMessages::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::ChatMessage& OfflineMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:OfflineMessages.messages)
  return _internal_messages(index);
}
inline ::ChatMessage* OfflineMessages::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::ChatMessage* OfflineMessages::add_messages() {
  ::ChatMessage* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:OfflineMessages.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessage >&
OfflineMessages::messages() const {
  // @@protoc_insertion_point(field_list:OfflineMessages.messages)
  return _impl_.messages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SyncItem_SyncType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SyncItem_SyncType>() {
  return ::SyncItem_SyncType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
