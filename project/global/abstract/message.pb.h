// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class FilePayload;
struct FilePayloadDefaultTypeInternal;
extern FilePayloadDefaultTypeInternal _FilePayload_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatMessage* Arena::CreateMaybeMessage<::ChatMessage>(Arena*);
template<> ::FilePayload* Arena::CreateMaybeMessage<::FilePayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FilePayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FilePayload) */ {
 public:
  inline FilePayload() : FilePayload(nullptr) {}
  ~FilePayload() override;
  explicit PROTOBUF_CONSTEXPR FilePayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilePayload(const FilePayload& from);
  FilePayload(FilePayload&& from) noexcept
    : FilePayload() {
    *this = ::std::move(from);
  }

  inline FilePayload& operator=(const FilePayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePayload& operator=(FilePayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilePayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilePayload* internal_default_instance() {
    return reinterpret_cast<const FilePayload*>(
               &_FilePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FilePayload& a, FilePayload& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilePayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilePayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilePayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FilePayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FilePayload& from) {
    FilePayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FilePayload";
  }
  protected:
  explicit FilePayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kFileHashFieldNumber = 3,
    kFileSizeFieldNumber = 2,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string file_hash = 3;
  void clear_file_hash();
  const std::string& file_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_hash();
  PROTOBUF_NODISCARD std::string* release_file_hash();
  void set_allocated_file_hash(std::string* file_hash);
  private:
  const std::string& _internal_file_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_hash(const std::string& value);
  std::string* _internal_mutable_file_hash();
  public:

  // int64 file_size = 2;
  void clear_file_size();
  int64_t file_size() const;
  void set_file_size(int64_t value);
  private:
  int64_t _internal_file_size() const;
  void _internal_set_file_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FilePayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_hash_;
    int64_t file_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kReceiverFieldNumber = 2,
    kTextFieldNumber = 5,
    kPayloadFieldNumber = 7,
    kTimestampFieldNumber = 4,
    kIsGroupFieldNumber = 3,
    kPinFieldNumber = 6,
  };
  // string sender = 1;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string receiver = 2;
  void clear_receiver();
  const std::string& receiver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // string text = 5;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .FilePayload payload = 7;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::FilePayload& payload() const;
  PROTOBUF_NODISCARD ::FilePayload* release_payload();
  ::FilePayload* mutable_payload();
  void set_allocated_payload(::FilePayload* payload);
  private:
  const ::FilePayload& _internal_payload() const;
  ::FilePayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::FilePayload* payload);
  ::FilePayload* unsafe_arena_release_payload();

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // bool is_group = 3;
  void clear_is_group();
  bool is_group() const;
  void set_is_group(bool value);
  private:
  bool _internal_is_group() const;
  void _internal_set_is_group(bool value);
  public:

  // bool pin = 6;
  void clear_pin();
  bool pin() const;
  void set_pin(bool value);
  private:
  bool _internal_pin() const;
  void _internal_set_pin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::FilePayload* payload_;
    int64_t timestamp_;
    bool is_group_;
    bool pin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FilePayload

// string file_name = 1;
inline void FilePayload::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FilePayload::file_name() const {
  // @@protoc_insertion_point(field_get:FilePayload.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilePayload::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FilePayload.file_name)
}
inline std::string* FilePayload::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:FilePayload.file_name)
  return _s;
}
inline const std::string& FilePayload::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FilePayload::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FilePayload::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FilePayload::release_file_name() {
  // @@protoc_insertion_point(field_release:FilePayload.file_name)
  return _impl_.file_name_.Release();
}
inline void FilePayload::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FilePayload.file_name)
}

// int64 file_size = 2;
inline void FilePayload::clear_file_size() {
  _impl_.file_size_ = int64_t{0};
}
inline int64_t FilePayload::_internal_file_size() const {
  return _impl_.file_size_;
}
inline int64_t FilePayload::file_size() const {
  // @@protoc_insertion_point(field_get:FilePayload.file_size)
  return _internal_file_size();
}
inline void FilePayload::_internal_set_file_size(int64_t value) {
  
  _impl_.file_size_ = value;
}
inline void FilePayload::set_file_size(int64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:FilePayload.file_size)
}

// string file_hash = 3;
inline void FilePayload::clear_file_hash() {
  _impl_.file_hash_.ClearToEmpty();
}
inline const std::string& FilePayload::file_hash() const {
  // @@protoc_insertion_point(field_get:FilePayload.file_hash)
  return _internal_file_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilePayload::set_file_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FilePayload.file_hash)
}
inline std::string* FilePayload::mutable_file_hash() {
  std::string* _s = _internal_mutable_file_hash();
  // @@protoc_insertion_point(field_mutable:FilePayload.file_hash)
  return _s;
}
inline const std::string& FilePayload::_internal_file_hash() const {
  return _impl_.file_hash_.Get();
}
inline void FilePayload::_internal_set_file_hash(const std::string& value) {
  
  _impl_.file_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* FilePayload::_internal_mutable_file_hash() {
  
  return _impl_.file_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* FilePayload::release_file_hash() {
  // @@protoc_insertion_point(field_release:FilePayload.file_hash)
  return _impl_.file_hash_.Release();
}
inline void FilePayload::set_allocated_file_hash(std::string* file_hash) {
  if (file_hash != nullptr) {
    
  } else {
    
  }
  _impl_.file_hash_.SetAllocated(file_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_hash_.IsDefault()) {
    _impl_.file_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FilePayload.file_hash)
}

// -------------------------------------------------------------------

// ChatMessage

// string sender = 1;
inline void ChatMessage::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& ChatMessage::sender() const {
  // @@protoc_insertion_point(field_get:ChatMessage.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_sender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatMessage.sender)
}
inline std::string* ChatMessage::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:ChatMessage.sender)
  return _s;
}
inline const std::string& ChatMessage::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void ChatMessage::_internal_set_sender(const std::string& value) {
  
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_sender() {
  
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_sender() {
  // @@protoc_insertion_point(field_release:ChatMessage.sender)
  return _impl_.sender_.Release();
}
inline void ChatMessage::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.sender)
}

// string receiver = 2;
inline void ChatMessage::clear_receiver() {
  _impl_.receiver_.ClearToEmpty();
}
inline const std::string& ChatMessage::receiver() const {
  // @@protoc_insertion_point(field_get:ChatMessage.receiver)
  return _internal_receiver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_receiver(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatMessage.receiver)
}
inline std::string* ChatMessage::mutable_receiver() {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:ChatMessage.receiver)
  return _s;
}
inline const std::string& ChatMessage::_internal_receiver() const {
  return _impl_.receiver_.Get();
}
inline void ChatMessage::_internal_set_receiver(const std::string& value) {
  
  _impl_.receiver_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_receiver() {
  
  return _impl_.receiver_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_receiver() {
  // @@protoc_insertion_point(field_release:ChatMessage.receiver)
  return _impl_.receiver_.Release();
}
inline void ChatMessage::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_.SetAllocated(receiver, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_.IsDefault()) {
    _impl_.receiver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.receiver)
}

// bool is_group = 3;
inline void ChatMessage::clear_is_group() {
  _impl_.is_group_ = false;
}
inline bool ChatMessage::_internal_is_group() const {
  return _impl_.is_group_;
}
inline bool ChatMessage::is_group() const {
  // @@protoc_insertion_point(field_get:ChatMessage.is_group)
  return _internal_is_group();
}
inline void ChatMessage::_internal_set_is_group(bool value) {
  
  _impl_.is_group_ = value;
}
inline void ChatMessage::set_is_group(bool value) {
  _internal_set_is_group(value);
  // @@protoc_insertion_point(field_set:ChatMessage.is_group)
}

// int64 timestamp = 4;
inline void ChatMessage::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t ChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:ChatMessage.timestamp)
  return _internal_timestamp();
}
inline void ChatMessage::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void ChatMessage::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ChatMessage.timestamp)
}

// string text = 5;
inline void ChatMessage::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& ChatMessage::text() const {
  // @@protoc_insertion_point(field_get:ChatMessage.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatMessage.text)
}
inline std::string* ChatMessage::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ChatMessage.text)
  return _s;
}
inline const std::string& ChatMessage::_internal_text() const {
  return _impl_.text_.Get();
}
inline void ChatMessage::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:ChatMessage.text)
  return _impl_.text_.Release();
}
inline void ChatMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.text)
}

// bool pin = 6;
inline void ChatMessage::clear_pin() {
  _impl_.pin_ = false;
}
inline bool ChatMessage::_internal_pin() const {
  return _impl_.pin_;
}
inline bool ChatMessage::pin() const {
  // @@protoc_insertion_point(field_get:ChatMessage.pin)
  return _internal_pin();
}
inline void ChatMessage::_internal_set_pin(bool value) {
  
  _impl_.pin_ = value;
}
inline void ChatMessage::set_pin(bool value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:ChatMessage.pin)
}

// .FilePayload payload = 7;
inline bool ChatMessage::_internal_has_payload() const {
  return this != internal_default_instance() && _impl_.payload_ != nullptr;
}
inline bool ChatMessage::has_payload() const {
  return _internal_has_payload();
}
inline void ChatMessage::clear_payload() {
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
}
inline const ::FilePayload& ChatMessage::_internal_payload() const {
  const ::FilePayload* p = _impl_.payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::FilePayload&>(
      ::_FilePayload_default_instance_);
}
inline const ::FilePayload& ChatMessage::payload() const {
  // @@protoc_insertion_point(field_get:ChatMessage.payload)
  return _internal_payload();
}
inline void ChatMessage::unsafe_arena_set_allocated_payload(
    ::FilePayload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payload_);
  }
  _impl_.payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChatMessage.payload)
}
inline ::FilePayload* ChatMessage::release_payload() {
  
  ::FilePayload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FilePayload* ChatMessage::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:ChatMessage.payload)
  
  ::FilePayload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
  return temp;
}
inline ::FilePayload* ChatMessage::_internal_mutable_payload() {
  
  if (_impl_.payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::FilePayload>(GetArenaForAllocation());
    _impl_.payload_ = p;
  }
  return _impl_.payload_;
}
inline ::FilePayload* ChatMessage::mutable_payload() {
  ::FilePayload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:ChatMessage.payload)
  return _msg;
}
inline void ChatMessage::set_allocated_payload(::FilePayload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
